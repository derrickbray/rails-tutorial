{{!-- <h2 class="section">First we need to make sure you have Ruby and Rails on your computer.</h2> --}}

<h3 class="step">1. Make sure that you have <a href="https://www.ruby-lang.org/en/documentation/installation/">Ruby</a> on your computer.</h3>
<div class="instructions">In your terminal check to see if Ruby is already on your computer.</div>
<div class="command">$ ruby -v</div>
<div class="instructions">If you have an older version put this in your terminal.</div>
<div class="command">$ updates ruby curl -L https://get.rvm.io | bash -s stable â€“ruby</div>
<div class="instructions">Now restart your terminal.</div>

<h3 class="step">2. Install <a href="http://guides.rubyonrails.org/getting_started.html">Rails</a> and other stuff.</h3>
<div class="instructions">Let's install <a href="http://bundler.io/">bundler</a>.</div>
<div class="command">$ gem install bundler</div>
<div class="instructions">Let's install rails.</div>
<div class="command">$ sudo gem install rails</div>
<div class="instructions">Enter your Mac's password.</div>
<div class="instructions">Restart your terminal and check if it worked.</div>
<div class="command">$ rails -v</div>

<h2 class="section">Let's start the new project.</h2>

<h3 class="step">1. First get into the correct file folder.</h3>

<h3 class="step">2. Start project.</h3>
<div class="instructions">In your terminal type</div>
<div class="command">$ rails new project-name</div>
<div class="instructions">Move into the project.</div>
<div class="command">$ cd project-name</div>

<h3 class="step">3. Start your server</h3>
<div class="command">$ rails s</div>
<div class="instructions">Open your browser to <a href="http://localhost:3000/">localhost:3000</a> and you should see something like this:</div>
<div class="pic-box">
  <img class="pic-box__img" src="../welcome-rails.jpeg" alt="">
</div>
<div class="instructions">If everything worked stop your server(control+C).</div>

<h3 class="step">4. If you want to add to Github now is the time.</h3>
<div class="instructions">Go to your terminal.</div>
<div class="command">$ git init</div>
<div class="command">$ hub create</div>
<div class="command">$ git add .</div>
<div class="command">$ git commit -m "start project"</div>
<div class="command">$ git push origin master</div>

<h2 class="section">Let's run some routes.</h2>

<h3 class="step">1. Open atom</h3>
<div class="command">$ atom .</div>

<h3 class="step">2. Now we need to add the <a href="https://github.com/amatsuda/nested_scaffold">nested/scaffold</a> gem.</h3>
<div class="instructions">Go to your gemfile and add this:</div>
<div class="command">gem 'nested_scaffold'</div>
<div class="instructions">Anytime you add a gem to your gemfile you need to run bundler in your terminal.</div>
<div class="command">$ bundler</div>
<div class="instructions">Now you should be able to have a nested CRUD app.</div>

<h3 class="step">3. Run scaffold.</h3>
<div class="instructions">We will build a app that keeps track of school locations and the students that are inrolled at each. In your terminal run:</div>
<div class="command">$ rails g scaffold school name:string location:string</div>
<div class="instructions">That will set up a MVC for school locations.</div>

<h3 class="step">4. Migrate the database.</h3>
<div class="instructions">Anytime we mess with the database we need to migrate those changes. In the terminal run:</div>
<div class="command">$ rake db:migrate </div>

<h3 class="step">5. Run nested/scaffold</h3>
<div class="instructions">Let's build the nested MVC for the students. In your terminal run:</div>
<div class="command">$ rails g nested_scaffold school/student name:string age:integer graduated:boolean</div>
<div class="instructions">That should give us a CRUD for students at each school.</div>

<h3 class="step">6. Check the relationships.</h3>
<div class="instructions">Go to app/model/student file and see if you have a belongs to relationship with school. It should look like this:</div>
<div class="command"> belongs_to :school</div>
<div class="instructions">Go to app/model/school file and see if you have a has many relationship with students. It should look like this:</div>
<div class="command"> has_many :students</div>

<h3 class="step">7. Migrate the database.</h3>
<div class="instructions">Anytime we mess with the database we need to migrate those changes. In the terminal run:</div>
<div class="command">$ rake db:migrate </div>

<h3 class="step">8. Set the root path.</h3>
<div class="instructions">Go to config/routes.rb after "Rails.application.routes.draw do" and before "resources :schools do" add:</div>
<div class="command">get 'schools/index'<br>
  root 'universes#index'</div>
<div class="instructions">This will change your root page from the Rails welcome page to the school index.</div>

<h3 class="step">9. Link your pages in the view.</h3>
<div class="instructions">Go to the app/views/schools/show.html.erb and add this link after the edit and back links. Use the syntax notation just like the other links.</div>
<div class="command"> link_to 'Students', school_students_path(@school, @student) </div>
<div class="instructions">Go to app/views/students/index.html.erb and add this link after the new student link. Use the syntax notation just like the other links.</div>
<div class="command"> link_to 'Back', schools_path </div>

<h3 class="step">10. Moment of truth.</h3>
<div class="instructions">Start your server and see what happens.</div>
<div class="command">$ rails s</div>
<div class="instructions">Did it work? If so move on to the next section. If not, I suggest looking at the links at the bottom of the page or <a href="https://google.com">Google</a>.</div>

<h2 class="section">Time to Style Those Views</h2>

<h3 class="step">1. If you want something to be the same on every page i.e. a nav or footer section.</h3>
<div class="instructions">Go to app/views/layouts/application.html.erb there you will see the main HTML.</div>
<div class="instructions">Add a nav inside the body tag before the yield tag.</div>
<div class="instructions">Add a footer inside the body tag after the yield tag.</div>

<h3 class="step">2. In atom go to app/assets/stylesheets/.</h3>
<div class="instructions">There should already be a few SCSS files and one CSS file. The styles that are being used now are in scaffold.scss, you can get rid of all that garbage.</div>

<h3 class="step">3. Go to app/views/schools/index.html.erb and start changing the HTML to your needs.</h3>
<h3 class="step">4. You can start styling in SCSS files (no need to link any of the existing stylesheets).</h3>

<h3 class="step">5. Images can be stored in app/assets/images. This will work locally but has trouble with Heroku.</h3>
<div class="instructions">There is probably some statement that needs to be commented in, but I don't know.</div>
<div class="instructions">To get around this just make an images folder in your public directory.</div>

<h2 class="section">Deploy to Heroku.</h2>

<h3 class="step">1. I'm assuming you have a Heroku account and that you can access it in your terminal.
  <a href="https://signup.heroku.com/dc">If not go here.</a></h3>

<h3 class="step">2. Next you will create a Heroku repository.</h3>
<div class="instructions">In the terminal type:</div>
<div class="command">$ heroku create project-name</div>

<h3 class="step">3. Change your production database.</h3>
<div class="instructions">Go to your gemfile and find where it says:</div>
<div class="command">gem 'sqlite3'</div>
<div class="instructions">Then replace that with:</div>
<div class="command">group :development, :test do<br>
                    gem 'sqlite3'<br>
                    end<br>
                    group :production do<br>
                    gem 'pg'<br>
                    end</div>
<div class="instructions">That will run postgres db when you deploy.</div>
<div class="instructions">Then run this in your terminal:</div>
<div class="command">$ bundle install --without production</div>

<h3 class="step">4. Save the changes to Github</h3>
<div class="command">$ git add .</div>
<div class="command">$ git commit -m "Changed Gemfile for Heroku"</div>
<div class="command">$ git push origin master</div>

<h3 class="step">4. Now push to Heroku.</h3>
<div class="instructions">Heroku will only recieve files that you have pushed to your Github. So make sure you are up to date.</div>
<div class="instructions">Then type this into your terminal:</div>
<div class="command">$ git push heroku master</div>

<h3 class="step">5. Run a migration on your Heroku site.</h3>
<div class="instructions">Type this in your terminal:</div>
<div class="command">$ heroku run rails db:migrate</div>

<h3 class="step">That should be it. Fingers crossed.</h3>
<div class="instructions">You can go to your URL or open it in your terminal with:</div>
<div class="command">$ heroku open</div>
